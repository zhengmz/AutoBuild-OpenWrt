#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: zhengmz
#=================================================

name: Build HiWiFi

on: 
  #release:
  #  types: [published]

  #push:
  #  branches: 
  #    - master

  schedule:
    - cron: 10 16 1 * *
  # every month second day 0:10 CST
  #  - cron: 10 16 * * sun
  # every sunday 0:10 CST
  #  - cron: 10 16 1 1,4,7,10 *
  # every quarter second day 0:10 CST
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch:

env:
  USE_CACHE: true
  UPLOAD_ARTIFACT: true
  SYNC_CODE: true
  CREATE_RELEASE: true

jobs:
  #sync-code:
  #  runs-on: ubuntu-latest

  #  steps:
  #  - name: Sync lede
  #    uses: TobKed/github-forks-sync-action@master
  #    with:
  #      github_token: ${{ secrets.GITHUB_TOKEN }}
  #      upstream_repository: coolsnowwolf/lede
  #      target_repository: zhengmz/lede
  #      upstream_branch: master
  #      target_branch: master
  #      force: true
  #      tags: true

  build:
    runs-on: ubuntu-latest
    #needs: sync-code

    # For create release
    permissions:
      contents: write

    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      #max-parallel: 1
      fail-fast: false
      matrix:
        #model: [HC5962]
        #model: [HC5962_default]
        model: 
          - HC5962
          #- HC5962_default

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt update -qqy
        sudo apt full-upgrade -qqy
        sudo apt install -qqy ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    # 使用github cache，参见 <https://github.com/coolsnowwolf/lede/pull/7796>
    - name: Use cache
      uses: klever1988/cachewrtbuild@main
      if: env.USE_CACHE == 'true'
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: Import external feeds
      working-directory: ./openwrt
      run: |
        #rm -rf package/helloworld
        git clone --depth=1 https://github.com/fw876/helloworld.git package/helloworld
        git clone --depth=1 https://github.com/zhengmz/luci-app-eqos.git package/luci-app-eqos
        git clone --depth=1 https://github.com/destan19/OpenAppFilter.git package/OpenAppFilter
        git clone --depth=1 https://github.com/kiddin9/luci-app-dnsfilter.git package/luci-app-dnsfilter
        #git clone --depth=1 https://github.com/shadowsocks/luci-app-shadowsocks.git package/luci-app-shadowsocks
        #sed -i '/routing/d' ./feeds.conf.default
        #echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-21.02" >> ./feeds.conf.default

    - name: Update & Custom feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        #rm -fr feeds/routing/batman-adv
        #svn co https://github.com/openwrt/routing/branches/openwrt-22.03/batman-adv/ feeds/routing/batman-adv
        rm -fr feeds/luci/themes/luci-theme-argon
        git clone --depth=1 -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git feeds/luci/themes/luci-theme-argon
        git clone --depth=1 https://github.com/jerrykuku/luci-app-argon-config.git package/luci-app-argon-config
 
    - name: Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds install -a
        ./scripts/feeds install -a

    - name: Configuration Customization
      env:
        CONFIG_FILE: 'HiWiFi_${{ matrix.model }}.config'
      run: |
        [ -e $CONFIG_FILE ] && cp -a $CONFIG_FILE openwrt/.config
        #echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> openwrt/.config
        # 编译为 SDK
        #echo "CONFIG_SDK=y" >> openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig

    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        #make -j$(nproc) V=s
        make -j$(nproc) || make -j1 || make -j1 V=s

    # 成功编译后，再同步代码
    - name: Sync code from upstream
      if: env.SYNC_CODE == 'true'
      run: |
        set +e
        chmod +x ./sync_code.sh
        ./sync_code.sh "${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}"

    - name: Copy external files
      working-directory: ./openwrt
      run: |
        #cp .config .config.old bin
        cp .config bin/config
        cp .config.old bin/config.orig
        # 定义一些变量
        #LAST_COMMIT=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        #echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_ENV
        echo "TAG_NAME=HiWiFi_${{ matrix.model }}-$(date -u '+%Y%m%d')" >> $GITHUB_ENV

    - name : Upload artifact
      uses: actions/upload-artifact@master
      if: env.UPLOAD_ARTIFACT == 'true'
      with:
        name: ${{ env.TAG_NAME }}
        path: openwrt/bin

    - name: Copy Release files
      working-directory: ./openwrt
      if: env.CREATE_RELEASE == 'true'
      run: |
        mkdir -p release
        set +e
        # 如果是 SDK，可能没有 bin 文件
        cp -a `find bin/targets -type f -name "*.bin"` release
        tar czf release/${TAG_NAME}.tar.gz bin/

        # 生成 release.txt
        chmod +x ../gen_release_msg.sh && ../gen_release_msg.sh

        du -sh release release.txt

    - name: Create release
      uses: ncipollo/release-action@v1
      if: env.CREATE_RELEASE == 'true'
      with:
        name: Autobuild ${{ matrix.model }} ${{ env.BUILD_TIME }}
        allowUpdates: true
        tag: ${{ env.TAG_NAME }}
        commit: master
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyFile: "openwrt/release.txt"
        artifacts: "openwrt/release/*"

    - name: Delete Older Releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


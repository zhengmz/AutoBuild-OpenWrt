#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: zhengmz
#=================================================

name: Build HiWiFi

on: 
  #release:
  #  types: [published]

  #push:
  #  branches: 
  #    - master

  schedule:
    - cron: 10 16 1 * *
  # every month second day 0:10 CST
  #  - cron: 10 16 * * sun
  # every sunday 0:10 CST
  #  - cron: 10 16 1 1,4,7,10 *
  # every quarter second day 0:10 CST
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch:

env:
  BUILD_SDK: true
  USE_CACHE: true
  UPLOAD_ARTIFACT: false
  SYNC_CODE: true
  CREATE_RELEASE: true
  DELETE_OLD_RELEASE: true
  DELETE_OLD_RUN: true

jobs:
  #sync-code:
  #  runs-on: ubuntu-latest

  #  steps:
  #  - name: Sync lede
  #    uses: TobKed/github-forks-sync-action@master
  #    with:
  #      github_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
  #      upstream_repository: coolsnowwolf/lede
  #      target_repository: zhengmz/lede
  #      upstream_branch: master
  #      target_branch: master
  #      force: true
  #      tags: true

  build:
    runs-on: ubuntu-latest
    #needs: sync-code

    # For create release
    permissions:
      contents: write

    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      #max-parallel: 1
      fail-fast: false
      matrix:
        #model: [HC5962]
        #model: [HC5962_default]
        model: 
          - HC5962
          #- HC5962_default

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        echo "***************************************"
        echo "Deleting docker images, please wait ..."
        echo "***************************************"
        docker rmi `docker images -q`
        echo "***************************************"
        echo "Deleting unuse package, please wait ..."
        echo "***************************************"
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -qqy purge \
          azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell \
          openjdk* mysql* php* mongodb* dotnet* moby* snapd*
        echo "***************************************"
        echo "Install required package, please wait ..."
        echo "***************************************"
        sudo -E apt-get update -qqy
        sudo -E apt-get upgrade -qqy
        sudo -E apt-get install -qqy \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qqy autoremove --purge
        sudo -E apt-get clean

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

        df -h

    # Github provide 10G cache
    # see <https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows>
    # see <https://github.com/coolsnowwolf/lede/pull/7796>
    - name: Use cache
      uses: klever1988/cachewrtbuild@main
      if: env.USE_CACHE == 'true'
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: Import external feeds
      working-directory: ./openwrt
      env: 
        EXTRA_DIR: package/extra
      run: |
        mkdir -p $EXTRA_DIR
        git clone --depth=1 https://github.com/fw876/helloworld.git $EXTRA_DIR/helloworld
        git clone --depth=1 https://github.com/zhengmz/luci-app-eqos.git $EXTRA_DIR/luci-app-eqos
        git clone --depth=1 https://github.com/destan19/OpenAppFilter.git $EXTRA_DIR/OpenAppFilter
        git clone --depth=1 https://github.com/kiddin9/luci-app-dnsfilter.git $EXTRA_DIR/luci-app-dnsfilter
        git clone --depth=1 https://github.com/jerrykuku/luci-app-argon-config.git $EXTRA_DIR/luci-app-argon-config
        #git clone --depth=1 https://github.com/shadowsocks/luci-app-shadowsocks.git $EXTRA_DIR/luci-app-shadowsocks
        #sed -i '/routing/d' ./feeds.conf.default
        #echo "src-git routing https://git.openwrt.org/feed/routing.git;openwrt-21.02" >> ./feeds.conf.default

    - name: Update & Custom feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        #rm -fr feeds/routing/batman-adv
        #svn co https://github.com/openwrt/routing/branches/openwrt-22.03/batman-adv/ feeds/routing/batman-adv
        rm -fr feeds/luci/themes/luci-theme-argon
        git clone --depth=1 -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git feeds/luci/themes/luci-theme-argon
 
    - name: Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds install -a
        # First install has more warning
        ./scripts/feeds install -a

    - name: Configuration Customization
      working-directory: ./openwrt
      env:
        CONFIG_FILE: 'HiWiFi_${{ matrix.model }}.config'
        DIY_SH: 'my_setting.sh'
      run: |
        [ -e ../$CONFIG_FILE ] && cp -a ../$CONFIG_FILE .config
        # build as SDK
        [ "x$BUILD_SDK" = "xtrue" ] && echo "CONFIG_SDK=y" >> .config
        [ -e ../$DIY_SH ] && chmod +x ../$DIY_SH && ../$DIY_SH

        # check
        diff ../$CONFIG_FILE .config
        git diff

        make defconfig

    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        #make -j$(nproc) V=s
        make -j$(nproc) || make -j1 || make -j1 V=s

    - name: Sync code from upstream
      if: env.SYNC_CODE == 'true'
      run: |
        set +e
        chmod +x ./sync_code.sh
        ./sync_code.sh "${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}"

    - name: Copy external files
      working-directory: ./openwrt
      run: |
        #cp .config .config.old bin
        cp .config bin/config
        cp .config.old bin/config.orig

        # check
        du -sh bin/*

    - name: Add environment variables
      env:
        TZ: 'Asia/Shanghai'
      run: |
        #echo "BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_ENV
        #echo "TAG_NAME=HiWiFi_${{ matrix.model }}-$(date -u '+%Y%m%d')" >> $GITHUB_ENV
        echo "BUILD_TIME=$(date '+%F %T %Z')" >> $GITHUB_ENV
        TAG_NAME="HiWiFi_${{ matrix.model }}-$(date '+%Y%m%d')"
        [ "x$BUILD_SDK" = "xtrue" ] && TAG_NAME="${TAG_NAME}-SDK"
        echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

        # check
        echo "cat GITHUB_ENV ..."
        cat $GITHUB_ENV

    - name : Upload artifact
      uses: actions/upload-artifact@master
      if: env.UPLOAD_ARTIFACT == 'true'
      with:
        name: ${{ env.TAG_NAME }}
        path: openwrt/bin

    - name: Generate release files
      working-directory: ./openwrt
      if: env.CREATE_RELEASE == 'true'
      run: |
        mkdir -p release
        set +e
        # Maybe not found bin file, if buildng SDK
        cp -a `find bin/targets -type f -name "*.bin"` release

        tar czf release/${TAG_NAME}.tar.gz bin/

        # Generate message file release.txt
        chmod +x ../gen_release_msg.sh && ../gen_release_msg.sh

        # check
        du -sh release release.txt

    - name: Create release
      uses: ncipollo/release-action@v1
      if: env.CREATE_RELEASE == 'true'
      with:
        name: Autobuild ${{ matrix.model }} ${{ env.BUILD_TIME }}
        allowUpdates: true
        tag: ${{ env.TAG_NAME }}
        commit: master
        token: ${{ secrets.GITHUB_TOKEN }}
        bodyFile: openwrt/release.txt
        artifacts: openwrt/release/*

    - name: Delete older releases
      uses: dev-drprasad/delete-older-releases@v0.2.0
      if: env.DELETE_OLD_RELEASE == 'true'
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete older workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      if: env.DELETE_OLD_RUN == 'true'
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 6

